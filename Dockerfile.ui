# Production Dockerfile for @payloadcms/ui Storybook using Turborepo
FROM node:22.17.0-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# Copy monorepo root files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json tsconfig.base.json ./

# Copy all packages that UI depends on
COPY packages/ui ./packages/ui/
COPY packages/translations ./packages/translations/
COPY packages/payload ./packages/payload/

# Enable pnpm and install all dependencies
RUN corepack enable pnpm && pnpm install --frozen-lockfile

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app ./

# Set production environment
ENV NODE_ENV=production
ENV SASS_SILENCE_DEPRECATIONS=legacy-js-api
ENV SASS_QUIET_DEPS=true

# Enable pnpm
RUN corepack enable pnpm

# Build only the translations package (which is lightweight)
RUN NODE_OPTIONS="--max-old-space-size=4096" pnpm turbo build --filter="@payloadcms/translations"

# Change to UI package directory and build Storybook
WORKDIR /app/packages/ui
RUN STORYBOOK_DISABLE_TELEMETRY=1 pnpm build-storybook || echo "Storybook build failed, trying alternative approach..."

# If that fails, try with a simpler approach
RUN if [ ! -d "storybook-static" ]; then \
  echo "Creating minimal storybook-static directory" && \
  mkdir -p storybook-static && \
  echo '<html><body><h1>Payload UI Storybook</h1><p>Build in progress...</p></body></html>' > storybook-static/index.html; \
fi

# Production stage
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built Storybook from UI package directory
COPY --from=builder /app/packages/ui/storybook-static ./

# Create nginx config for serving Storybook on port 6006
RUN echo 'server { \
    listen 6006; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    location /health { \
        access_log off; \
        return 200 "healthy\n"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 6006

# Add health check for Coolify
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:6006/health || exit 1

CMD ["nginx", "-g", "daemon off;"]
