# Production Dockerfile for @payloadcms/ui Storybook
FROM node:22.17.0-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy UI package files
COPY packages/ui/package.json ./
COPY packages/ui/babel.config.cjs packages/ui/bundle.js packages/ui/tsconfig.json packages/ui/.swcrc packages/ui/.browserslistrc ./
COPY packages/ui/.storybook ./.storybook/
COPY packages/ui/src ./src/

# Copy monorepo TypeScript configuration (required by Storybook)
COPY tsconfig.base.json ./tsconfig.base.json

# Create a temporary package.json without workspace dependencies
RUN node -e "const pkg = require('./package.json'); const fs = require('fs'); if (pkg.dependencies && pkg.dependencies['@payloadcms/translations']) { delete pkg.dependencies['@payloadcms/translations']; } if (pkg.peerDependencies) { delete pkg.peerDependencies.payload; } if (pkg.devDependencies) { delete pkg.devDependencies.payload; delete pkg.devDependencies['@payloadcms/eslint-config']; } fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Copy translations package after pnpm install to avoid conflicts
COPY packages/translations ./translations_temp

# Enable pnpm and install dependencies
RUN corepack enable pnpm && pnpm i --no-frozen-lockfile

# Move translations package to node_modules after install
RUN mkdir -p ./node_modules/@payloadcms && mv ./translations_temp ./node_modules/@payloadcms/translations

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app ./

# Set production environment
ENV NODE_ENV=production
ENV SASS_SILENCE_DEPRECATIONS=legacy-js-api
ENV SASS_QUIET_DEPS=true

# Copy tsconfig.base.json to root directory where Storybook expects it
RUN cp ./tsconfig.base.json /tsconfig.base.json

# Try building Storybook with minimal configuration
RUN corepack enable pnpm && STORYBOOK_DISABLE_TELEMETRY=1 pnpm build-storybook || echo "Storybook build failed, trying alternative approach..."

# If that fails, try with a simpler approach
RUN if [ ! -d "storybook-static" ]; then \
  echo "Creating minimal storybook-static directory" && \
  mkdir -p storybook-static && \
  echo '<html><body><h1>Payload UI Storybook</h1><p>Build in progress...</p></body></html>' > storybook-static/index.html; \
fi

# Production stage
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built Storybook
COPY --from=builder /app/storybook-static ./

# Create nginx config for serving Storybook on port 6006
RUN echo 'server { \
    listen 6006; \
    server_name localhost; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    location /health { \
        access_log off; \
        return 200 "healthy\n"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 6006

# Add health check for Coolify
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:6006/health || exit 1

CMD ["nginx", "-g", "daemon off;"]
