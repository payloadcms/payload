/* eslint-disable @typescript-eslint/no-floating-promises */
import fs from 'fs'
import { compile } from 'json-schema-to-typescript'

import payload from '..'
import loadConfig from '../config/load'
import { configToJSONSchema } from '../utilities/configToJSONSchema'
import Logger from '../utilities/logger'

export async function generateTypes(): Promise<void> {
  const logger = Logger()
  const config = await loadConfig()
  const outputFile = process.env.PAYLOAD_TS_OUTPUT_PATH || config.typescript.outputFile

  await payload.init({
    disableDBConnect: true,
    disableOnInit: true,
    local: true,
    secret: '--unused--',
  })

  logger.info('Compiling TS types for Collections and Globals...')

  const jsonSchema = configToJSONSchema(payload.config, payload.db.defaultIDType, payload)

  const declare = `declare module 'payload' {\n  export interface GeneratedTypes extends Config {}\n}`

  compile(jsonSchema, 'Config', {
    bannerComment:
      '/* tslint:disable */\n/* eslint-disable */\n/**\n* This file was automatically generated by Payload.\n* DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,\n* and re-run `payload generate:types` to regenerate this file.\n*/',
    style: {
      singleQuote: true,
    },
    // Generates code for $defs that aren't referenced by the schema. Reason:
    // If a field defines an interfaceName, it should be included in the generated types
    // even if it's not used by another type. Reason: the user might want to use it in their own code.
    unreachableDefinitions: true,
  }).then((compiled) => {
    if (config.typescript.declare !== false) {
      compiled += `\n\n${declare}`
    }
    fs.writeFileSync(outputFile, compiled)
    logger.info(`Types written to ${outputFile}`)
  })
}

// when generateTypes.js is launched directly
if (module.id === require.main.id) {
  generateTypes()
}
