/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    posts: Post;
    relationships: Relationship;
    'relationships-to-joins': RelationshipsToJoin;
    joins: Join;
    'relationships-deep': RelationshipsDeep;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    joins: {
      relatedRelations: 'relationships-to-joins';
    };
  };
  collectionsSelect: {
    posts: PostsSelect<false> | PostsSelect<true>;
    relationships: RelationshipsSelect<false> | RelationshipsSelect<true>;
    'relationships-to-joins': RelationshipsToJoinsSelect<false> | RelationshipsToJoinsSelect<true>;
    joins: JoinsSelect<false> | JoinsSelect<true>;
    'relationships-deep': RelationshipsDeepSelect<false> | RelationshipsDeepSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    menu: Menu;
  };
  globalsSelect: {
    menu: MenuSelect<false> | MenuSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
  depth: {
    allowed: 0 | 1 | 2 | 3 | 4 | 5;
    /**
     * @minItems 6
     * @maxItems 6
     */
    decremented: [null, 0, 1, 2, 3, 4];
    default: 0;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  text?: string | null;
  updatedAt: string;
  createdAt: string;
  __collection?: 'posts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships".
 */
export interface Relationship {
  id: string;
  one: string | Post;
  oneOptional?: (string | null) | Post;
  many: (string | Post)[];
  manyOptional?: (string | Post)[] | null;
  onePoly:
    | {
        relationTo: 'posts';
        value: string | Post;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  onePolyOptional?:
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  manyPoly: (
    | {
        relationTo: 'posts';
        value: string | Post;
      }
    | {
        relationTo: 'users';
        value: string | User;
      }
  )[];
  manyPolyOptional?:
    | (
        | {
            relationTo: 'posts';
            value: string | Post;
          }
        | {
            relationTo: 'users';
            value: string | User;
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  __collection?: 'relationships';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
  __collection?: 'users';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships-to-joins".
 */
export interface RelationshipsToJoin {
  id: string;
  join: string | Join;
  updatedAt: string;
  createdAt: string;
  __collection?: 'relationships-to-joins';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "joins".
 */
export interface Join {
  id: string;
  relatedRelations?: {
    docs?: (string | RelationshipsToJoin)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
  __collection?: 'joins';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships-deep".
 */
export interface RelationshipsDeep {
  id: string;
  depthTwoOne: string | Relationship;
  group?: {
    blocks?:
      | (
          | {
              oneFirst: string | Post;
              id?: string | null;
              blockName?: string | null;
              blockType: 'first';
            }
          | {
              oneSecond: string | Post;
              id?: string | null;
              blockName?: string | null;
              blockType: 'second';
            }
        )[]
      | null;
    array?:
      | {
          one: string | Post;
          many: (string | Post)[];
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
  __collection?: 'relationships-deep';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'relationships';
        value: string | Relationship;
      } | null)
    | ({
        relationTo: 'relationships-to-joins';
        value: string | RelationshipsToJoin;
      } | null)
    | ({
        relationTo: 'joins';
        value: string | Join;
      } | null)
    | ({
        relationTo: 'relationships-deep';
        value: string | RelationshipsDeep;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
  __collection?: 'payload-locked-documents';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  __collection?: 'payload-preferences';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
  __collection?: 'payload-migrations';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  text?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships_select".
 */
export interface RelationshipsSelect<T extends boolean = true> {
  one?: T;
  oneOptional?: T;
  many?: T;
  manyOptional?: T;
  onePoly?: T;
  onePolyOptional?: T;
  manyPoly?: T;
  manyPolyOptional?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships-to-joins_select".
 */
export interface RelationshipsToJoinsSelect<T extends boolean = true> {
  join?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "joins_select".
 */
export interface JoinsSelect<T extends boolean = true> {
  relatedRelations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "relationships-deep_select".
 */
export interface RelationshipsDeepSelect<T extends boolean = true> {
  depthTwoOne?: T;
  group?:
    | T
    | {
        blocks?:
          | T
          | {
              first?:
                | T
                | {
                    oneFirst?: T;
                    id?: T;
                    blockName?: T;
                  };
              second?:
                | T
                | {
                    oneSecond?: T;
                    id?: T;
                    blockName?: T;
                  };
            };
        array?:
          | T
          | {
              one?: T;
              many?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu".
 */
export interface Menu {
  id: string;
  text?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
  __collection?: 'menu';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "menu_select".
 */
export interface MenuSelect<T extends boolean = true> {
  text?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  // @ts-ignore 
  export interface GeneratedTypes extends Config {}
}